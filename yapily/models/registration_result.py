# coding: utf-8

"""
    Yapily API

    To access endpoints that require authentication, use your application key and secret created in the Dashboard (https://dashboard.yapily.com)  # noqa: E501

    The version of the OpenAPI document: 0.0.359
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class RegistrationResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'application_id': 'str',
        'institution_id': 'str',
        'tpp_id': 'str',
        'software_id': 'str',
        'client_name': 'str',
        'signing_key_id': 'str',
        'signing_certificate_id': 'str',
        'transport_key_id': 'str',
        'transport_certificate_id': 'str',
        'client_uri': 'str',
        'terms_of_service_uri': 'str',
        'ssa_jwt': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'signing_key_store': 'str',
        'transport_key_store': 'str',
        'registration_response': 'str'
    }

    attribute_map = {
        'application_id': 'applicationId',
        'institution_id': 'institutionId',
        'tpp_id': 'tppId',
        'software_id': 'softwareId',
        'client_name': 'clientName',
        'signing_key_id': 'signingKeyId',
        'signing_certificate_id': 'signingCertificateId',
        'transport_key_id': 'transportKeyId',
        'transport_certificate_id': 'transportCertificateId',
        'client_uri': 'clientUri',
        'terms_of_service_uri': 'termsOfServiceUri',
        'ssa_jwt': 'ssaJwt',
        'client_id': 'clientId',
        'client_secret': 'clientSecret',
        'signing_key_store': 'signingKeyStore',
        'transport_key_store': 'transportKeyStore',
        'registration_response': 'registrationResponse'
    }

    def __init__(self, application_id=None, institution_id=None, tpp_id=None, software_id=None, client_name=None, signing_key_id=None, signing_certificate_id=None, transport_key_id=None, transport_certificate_id=None, client_uri=None, terms_of_service_uri=None, ssa_jwt=None, client_id=None, client_secret=None, signing_key_store=None, transport_key_store=None, registration_response=None, local_vars_configuration=None):  # noqa: E501
        """RegistrationResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._application_id = None
        self._institution_id = None
        self._tpp_id = None
        self._software_id = None
        self._client_name = None
        self._signing_key_id = None
        self._signing_certificate_id = None
        self._transport_key_id = None
        self._transport_certificate_id = None
        self._client_uri = None
        self._terms_of_service_uri = None
        self._ssa_jwt = None
        self._client_id = None
        self._client_secret = None
        self._signing_key_store = None
        self._transport_key_store = None
        self._registration_response = None
        self.discriminator = None

        if application_id is not None:
            self.application_id = application_id
        if institution_id is not None:
            self.institution_id = institution_id
        if tpp_id is not None:
            self.tpp_id = tpp_id
        if software_id is not None:
            self.software_id = software_id
        if client_name is not None:
            self.client_name = client_name
        if signing_key_id is not None:
            self.signing_key_id = signing_key_id
        if signing_certificate_id is not None:
            self.signing_certificate_id = signing_certificate_id
        if transport_key_id is not None:
            self.transport_key_id = transport_key_id
        if transport_certificate_id is not None:
            self.transport_certificate_id = transport_certificate_id
        if client_uri is not None:
            self.client_uri = client_uri
        if terms_of_service_uri is not None:
            self.terms_of_service_uri = terms_of_service_uri
        if ssa_jwt is not None:
            self.ssa_jwt = ssa_jwt
        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if signing_key_store is not None:
            self.signing_key_store = signing_key_store
        if transport_key_store is not None:
            self.transport_key_store = transport_key_store
        if registration_response is not None:
            self.registration_response = registration_response

    @property
    def application_id(self):
        """Gets the application_id of this RegistrationResult.  # noqa: E501


        :return: The application_id of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this RegistrationResult.


        :param application_id: The application_id of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def institution_id(self):
        """Gets the institution_id of this RegistrationResult.  # noqa: E501


        :return: The institution_id of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this RegistrationResult.


        :param institution_id: The institution_id of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._institution_id = institution_id

    @property
    def tpp_id(self):
        """Gets the tpp_id of this RegistrationResult.  # noqa: E501


        :return: The tpp_id of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._tpp_id

    @tpp_id.setter
    def tpp_id(self, tpp_id):
        """Sets the tpp_id of this RegistrationResult.


        :param tpp_id: The tpp_id of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._tpp_id = tpp_id

    @property
    def software_id(self):
        """Gets the software_id of this RegistrationResult.  # noqa: E501


        :return: The software_id of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._software_id

    @software_id.setter
    def software_id(self, software_id):
        """Sets the software_id of this RegistrationResult.


        :param software_id: The software_id of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._software_id = software_id

    @property
    def client_name(self):
        """Gets the client_name of this RegistrationResult.  # noqa: E501


        :return: The client_name of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this RegistrationResult.


        :param client_name: The client_name of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def signing_key_id(self):
        """Gets the signing_key_id of this RegistrationResult.  # noqa: E501


        :return: The signing_key_id of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._signing_key_id

    @signing_key_id.setter
    def signing_key_id(self, signing_key_id):
        """Sets the signing_key_id of this RegistrationResult.


        :param signing_key_id: The signing_key_id of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._signing_key_id = signing_key_id

    @property
    def signing_certificate_id(self):
        """Gets the signing_certificate_id of this RegistrationResult.  # noqa: E501


        :return: The signing_certificate_id of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._signing_certificate_id

    @signing_certificate_id.setter
    def signing_certificate_id(self, signing_certificate_id):
        """Sets the signing_certificate_id of this RegistrationResult.


        :param signing_certificate_id: The signing_certificate_id of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._signing_certificate_id = signing_certificate_id

    @property
    def transport_key_id(self):
        """Gets the transport_key_id of this RegistrationResult.  # noqa: E501


        :return: The transport_key_id of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._transport_key_id

    @transport_key_id.setter
    def transport_key_id(self, transport_key_id):
        """Sets the transport_key_id of this RegistrationResult.


        :param transport_key_id: The transport_key_id of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._transport_key_id = transport_key_id

    @property
    def transport_certificate_id(self):
        """Gets the transport_certificate_id of this RegistrationResult.  # noqa: E501


        :return: The transport_certificate_id of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._transport_certificate_id

    @transport_certificate_id.setter
    def transport_certificate_id(self, transport_certificate_id):
        """Sets the transport_certificate_id of this RegistrationResult.


        :param transport_certificate_id: The transport_certificate_id of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._transport_certificate_id = transport_certificate_id

    @property
    def client_uri(self):
        """Gets the client_uri of this RegistrationResult.  # noqa: E501


        :return: The client_uri of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._client_uri

    @client_uri.setter
    def client_uri(self, client_uri):
        """Sets the client_uri of this RegistrationResult.


        :param client_uri: The client_uri of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._client_uri = client_uri

    @property
    def terms_of_service_uri(self):
        """Gets the terms_of_service_uri of this RegistrationResult.  # noqa: E501


        :return: The terms_of_service_uri of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._terms_of_service_uri

    @terms_of_service_uri.setter
    def terms_of_service_uri(self, terms_of_service_uri):
        """Sets the terms_of_service_uri of this RegistrationResult.


        :param terms_of_service_uri: The terms_of_service_uri of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._terms_of_service_uri = terms_of_service_uri

    @property
    def ssa_jwt(self):
        """Gets the ssa_jwt of this RegistrationResult.  # noqa: E501


        :return: The ssa_jwt of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._ssa_jwt

    @ssa_jwt.setter
    def ssa_jwt(self, ssa_jwt):
        """Sets the ssa_jwt of this RegistrationResult.


        :param ssa_jwt: The ssa_jwt of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._ssa_jwt = ssa_jwt

    @property
    def client_id(self):
        """Gets the client_id of this RegistrationResult.  # noqa: E501


        :return: The client_id of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this RegistrationResult.


        :param client_id: The client_id of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this RegistrationResult.  # noqa: E501


        :return: The client_secret of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this RegistrationResult.


        :param client_secret: The client_secret of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def signing_key_store(self):
        """Gets the signing_key_store of this RegistrationResult.  # noqa: E501


        :return: The signing_key_store of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._signing_key_store

    @signing_key_store.setter
    def signing_key_store(self, signing_key_store):
        """Sets the signing_key_store of this RegistrationResult.


        :param signing_key_store: The signing_key_store of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._signing_key_store = signing_key_store

    @property
    def transport_key_store(self):
        """Gets the transport_key_store of this RegistrationResult.  # noqa: E501


        :return: The transport_key_store of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._transport_key_store

    @transport_key_store.setter
    def transport_key_store(self, transport_key_store):
        """Sets the transport_key_store of this RegistrationResult.


        :param transport_key_store: The transport_key_store of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._transport_key_store = transport_key_store

    @property
    def registration_response(self):
        """Gets the registration_response of this RegistrationResult.  # noqa: E501


        :return: The registration_response of this RegistrationResult.  # noqa: E501
        :rtype: str
        """
        return self._registration_response

    @registration_response.setter
    def registration_response(self, registration_response):
        """Sets the registration_response of this RegistrationResult.


        :param registration_response: The registration_response of this RegistrationResult.  # noqa: E501
        :type: str
        """

        self._registration_response = registration_response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistrationResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegistrationResult):
            return True

        return self.to_dict() != other.to_dict()
